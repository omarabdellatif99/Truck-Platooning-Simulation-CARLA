import cv2
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Load and resize image
image = cv2.imread('lanext.jpeg')
if image is None:
    raise FileNotFoundError("Image file not found. Check the path or filename.")
image = cv2.resize(image, (640, 360))
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
blur = cv2.GaussianBlur(gray, (5, 5), 0)
edges = cv2.Canny(blur, 50, 150)

# Region of interest
height, width = edges.shape
mask = np.zeros_like(edges)
polygon = np.array([[
    (0, height),
    (width, height),
    (int(width * 0.55), int(height * 0.6)),
    (int(width * 0.45), int(height * 0.6))
]], np.int32)
cv2.fillPoly(mask, polygon, 255)
cropped_edges = cv2.bitwise_and(edges, mask)

# Hough Transform (detect lines)
lines = cv2.HoughLinesP(
    cropped_edges,
    rho=1,
    theta=np.pi / 180,
    threshold=50,
    minLineLength=20,
    maxLineGap=100
)

# Step 2: Extract Features from Lines
features = []

if lines is not None:
    for line in lines:
        x1, y1, x2, y2 = line[0]
        dx = x2 - x1
        dy = y2 - y1

        if dx == 0:
            slope = float('inf')  # Vertical line
        else:
            slope = dy / dx

        length = np.sqrt(dx**2 + dy**2)
        mid_x = (x1 + x2) / 2
        mid_y = (y1 + y2) / 2

        features.append([slope, length, mid_x, mid_y])

# Step 3: Save Features to CSV
if features:
    df = pd.DataFrame(features, columns=['slope', 'length', 'mid_x', 'mid_y'])
    df.to_csv('lane_features.csv', index=False)
    print("✅ Features saved to 'lane_features.csv'")
else:
    print("⚠️ No features extracted — no lines were detected.")

# Optional: Draw lines on image (same as before)
def make_line(slope_intercept, y1, y2):
    slope, intercept = slope_intercept
    x1 = int((y1 - intercept) / slope)
    x2 = int((y2 - intercept) / slope)
    return x1, y1, x2, y2

def average_slope_intercept(lines):
    left, right = [], []
    for line in lines:
        x1, y1, x2, y2 = line[0]
        if x2 == x1:
            continue
        slope = (y2 - y1) / (x2 - x1)
        if abs(slope) < 0.3:
            continue
        intercept = y1 - slope * x1
        if slope < 0:
            left.append((slope, intercept))
        else:
            right.append((slope, intercept))
    left_avg = np.mean(left, axis=0) if left else None
    right_avg = np.mean(right, axis=0) if right else None
    return left_avg, right_avg

line_image = np.zeros_like(image)
if lines is not None:
    left_avg, right_avg = average_slope_intercept(lines)
    y1 = height
    y2 = int(height * 0.6)

    if left_avg is not None:
        x1, y1_, x2, y2_ = make_line(left_avg, y1, y2)
        cv2.line(line_image, (x1, y1_), (x2, y2_), (255, 0, 0), 6)

    if right_avg is not None:
        x1, y1_, x2, y2_ = make_line(right_avg, y1, y2)
        cv2.line(line_image, (x1, y1_), (x2, y2_), (255, 0, 0), 6)

combo_image = cv2.addWeighted(image, 0.8, line_image, 1, 1)

# Show result
plt.figure(figsize=(10, 5))
plt.imshow(cv2.cvtColor(combo_image, cv2.COLOR_BGR2RGB))
plt.title("Detected Lane Lines")
plt.axis("off")
plt.show()
